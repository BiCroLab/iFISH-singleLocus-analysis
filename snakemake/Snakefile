import os
import matplotlib as mpl
mpl.use('Agg')
try:
    import pygpseq
except ImportError as e:
    raise Exception("Missing `pygpseq`. Please install it with `pip3 install pygpseq`.")

TIFF_FINDOOF_VERSION = subprocess.check_output("tiff_findoof --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
TIFF_AUTO3DSEG_VERSION = subprocess.check_output("tiff_auto3dseg --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
GPSEQ_FROMFISH_VERSION = subprocess.check_output("gpseq_fromfish --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
GPSEQ_FROMFISH_MERGE_VERSION = subprocess.check_output("gpseq_fromfish_merge --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
RM_FAILED_CHANNELS_VERSION = subprocess.check_output("../scripts/rmFailedChannels.py --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
NUCLEIDS_STATS_VERSION = subprocess.check_output("../scripts/nucleiDatasetStats.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
NUCLEI_POPSEL_VERSION = subprocess.check_output("../scripts/nucleiSelectPopulation.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
DOT_SELECT_VERSION = subprocess.check_output("../scripts/dotSelect.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
PROBE_STATS_VERSION = subprocess.check_output("../scripts/nucleiProbeStats.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
IDEOGRAM_PLOT_VERSION = subprocess.check_output("../scripts/plotIdeograms.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")
RANK_PROBES_VERSION = subprocess.check_output("../scripts/rankProbes.R --version", shell = True).decode("utf-8").strip().split(" ")[1].strip("v")

ORF = config['output_root_folder']

final_suffix = ["merged.noDiscardedChannels.G1selected", "merged.noDiscardedChannels.G1selected.brightest"]

rule all:
    input:
        "%s/fromfish_merged/dots.merged.tsv" % ORF,
        "%s/ideograms/probes.merged.noDiscardedChannels.G1selected.png" % ORF,
        expand(("%s/rankings/ranks.{flag}.%dprobe.{suffix}.tsv" % (ORF, size)
            for size in config['rank_bin_sizes']), suffix = final_suffix, flag = config['probe_bed']),
        expand("%s/rankings/ranks.{flag}.chrom.{suffix}.tsv" % ORF,
            suffix = final_suffix, flag = config['probe_bed'])

rule Find_out_of_focus:
    version: TIFF_FINDOOF_VERSION
    input:
        imdir = lambda wildcards: directory("%s/%s/" % (config['deconvolved_root_folder'], wildcards.sample))
    output:
        "%s/oof/{sample}.pdf" % ORF
    params:
        outdir = "%s/oof" % ORF,
        output = "%s/oof/{sample}.tsv" % ORF
    threads: 1
    shell: """
        mkdir -p {params.outdir}
        tiff_findoof -PR {input.imdir} {params.output}
    """

rule Automatic_3D_segmentation:
    version: TIFF_AUTO3DSEG_VERSION
    input:
        imdir = directory("%s/{sample}/" % config['deconvolved_root_folder']),
        requirement = lambda wildcards: expand("%s/oof/%s.pdf" % (ORF, wildcards.sample))
    output:
        directory("%s/{sample}/" % config['masks_root_folder'])
    log:
        "%s/{sample}/snakemake.log" % config['masks_root_folder']
    params:
        outdir = "%s/{sample}/" % config['masks_root_folder'],
        compressed = "--compressed" if config['mask_compressed'] else "",
        labeled = "--labeled" if config['mask_labeled'] else ""
    threads: config['threads_per_job']
    shell: """
        mkdir -p {params.outdir}
        tiff_auto3dseg -t {threads} {params.compressed} {params.labeled} {input.imdir} {params.outdir} -y &> {log}
    """

rule Calculate_Lamina_Distance:
    version: GPSEQ_FROMFISH_VERSION
    input:
        dot_coords = "%s/{sample}_auto_userdots.csv" % config['auto_userdots_folder'],
        imdir = directory("%s/{sample}/" % config['deconvolved_root_folder']),
        maskdir = directory("%s/{sample}/" % config["masks_root_folder"]),
        requirements = lambda wildcards: expand([
                "%s/%s/" % (config['masks_root_folder'], wildcards.sample),
                "%s/%s_auto_userdots.csv" % (config['auto_userdots_folder'], wildcards.sample),
                "%s/%s/" % (config['deconvolved_root_folder'], wildcards.sample)
            ])
    output:
        "%s/fromfish/{sample}/wCentr.out.dilate%d.{sample}_auto_userdots.tsv" % (ORF, config['dilation'])
    log:
        "%s/fromfish/{sample}/snakemake.log" % ORF
    params:
        outdir = "%s/fromfish/{sample}/" % ORF,
        dilation = config['dilation'],
        aspect = " ".join([str(x) for x in config['aspect']]),
        distance_type = config['distance_type'],
        mask_params = "-m '%s/{sample}/' -M '%s'" % (config["masks_root_folder"], config['mask_prefix']),
        compressed = "--compressed" if config['mask_compressed'] else "",
        labeled = "--labeled" if config['mask_labeled'] else "",
        axis_fraction = config['axis_fraction'],
        discard_channels = " ".join(config['discard_channels']),
        dilate_Z = "--dilate-Z" if config['dilate_Z'] else ""
    threads: config['threads_per_job']
    shell: """
        mkdir -p {params.outdir}
        gpseq_fromfish -a {params.aspect} -D {params.dilation} --dist-type {params.distance_type} -t {threads} \
            {params.mask_params} {params.compressed} {params.labeled} -P {params.axis_fraction} -C {params.discard_channels} \
            {params.dilate_Z} '{input.dot_coords}' '{input.imdir}' '{params.outdir}' -y &> {log}
    """

rule Merge_datasets:
    version: GPSEQ_FROMFISH_MERGE_VERSION
    input:
        meta = config['metadata'],
        dotsTables = expand("%s/fromfish/{sample}/wCentr.out.dilate%d.{sample}_auto_userdots.tsv" % (
            ORF, config['dilation']), sample = config['datasets'])
    output:
        "%s/fromfish_merged/copies.merged.tsv" % ORF,
        "%s/fromfish_merged/density_profile.merged.tsv" % ORF,
        "%s/fromfish_merged/dots.merged.tsv" % ORF,
        "%s/fromfish_merged/ncomps.merged.tsv" % ORF,
        "%s/fromfish_merged/nuclei.merged.tsv" % ORF,
        "%s/fromfish_merged/volume_profile.merged.tsv" % ORF
    log:
        "%s/fromfish_merged/gpseq_fromfish_merge.log" % ORF
    params:
        indir = "%s/fromfish/" % ORF,
        outdir = "%s/fromfish_merged" % ORF,
        aspect = " ".join([str(x) for x in config['aspect']]),
        sep = "-d %s" % config['metadata_delim'] if "\t" != config['metadata_delim'] else ""
    threads: 100
    shell: """
        mkdir -p {params.outdir}
        gpseq_fromfish_merge --no-date -t {threads} \
            -m {input.meta} -i {params.indir} -o {params.outdir} \
            -a {params.aspect} {params.sep} &> {log}
    """

rule Check_nuclei_by_dataset:
    version: NUCLEIDS_STATS_VERSION
    input:
        nucleiTable = lambda wildcards: "%s/fromfish_merged/nuclei.%s.tsv" % (ORF, wildcards.suffix),
        nucompTable = lambda wildcards: "%s/fromfish_merged/ncomps.%s.tsv" % (ORF, wildcards.suffix)
    output:
        "%s/fromfish_merged/stats/nuclei_by_dataset.{suffix}.pdf" % ORF
    log:
        "%s/fromfish_merged/log/nuclei_dataset_stats.{suffix}.log" % ORF
    params:
        indir = "%s/fromfish_merged" % ORF,
        suffix = "{suffix}"
    threads: 1
    shell: """
        mkdir -p {params.indir}/stats
        ../scripts/nucleiDatasetStats.R {input.nucleiTable} {input.nucompTable} \
            {params.indir}/stats -s {params.suffix} &> {log}
    """

rule Remove_failed_channels:
    version: RM_FAILED_CHANNELS_VERSION
    input:
        dotsTable = "%s/fromfish_merged/dots.merged.tsv" % ORF,
        requirement = "%s/fromfish_merged/stats/nuclei_by_dataset.merged.pdf" % ORF # Sanity check
    output:
        "%s/fromfish_merged/dots.merged.noDiscardedChannels.tsv" % ORF
    log:
        "%s/fromfish_merged/log/discarded_channel_removal.log" % ORF
    params:
        indir = "%s/fromfish_merged/" % ORF,
    threads: 1
    shell: """
        mkdir -p {params.indir}/log
        ../scripts/rmFailedChannels.py {params.indir} &> {log}
    """

rule Select_nuclear_G1_population:
    version: NUCLEI_POPSEL_VERSION
    input:
        dotsTable = "%s/fromfish_merged/dots.merged.noDiscardedChannels.tsv" % ORF,
        mergedNuclei = "%s/fromfish_merged/nuclei.merged.tsv" % ORF,
        mergedNComps = "%s/fromfish_merged/ncomps.merged.tsv" % ORF
    output:
        "%s/fromfish_merged/dots.merged.noDiscardedChannels.G1selected.tsv" % ORF,
        "%s/fromfish_merged/nuclei.merged.G1selected.tsv" % ORF,
        "%s/fromfish_merged/ncomps.merged.G1selected.tsv" % ORF
    log:
        "%s/fromfish_merged/log/nuclei_population_selection.log" % ORF
    params:
        indir = "%s/fromfish_merged" % ORF,
        ksigma = config['k_sigma_population_selection']
    threads: 100
    shell: """
        ../scripts/nucleiSelectPopulation.R \
            {input.dotsTable} {input.mergedNuclei} {input.mergedNComps} \
            {params.indir}/stats -t {threads} --ksigma {params.ksigma} &> {log}
    """

rule Brightest_dot_selection:
    version: DOT_SELECT_VERSION
    input:
        dotsTable = "%s/fromfish_merged/dots.merged.noDiscardedChannels.G1selected.tsv" % ORF,
        requirement = "%s/fromfish_merged/stats/nuclei_by_dataset.merged.G1selected.pdf" % ORF # Sanity check
    output:
        "%s/fromfish_merged/dots.merged.noDiscardedChannels.G1selected.brightest.tsv" % ORF
    log:
        "%s/fromfish_merged/log/dot_selection.log" % ORF
    params:
        nDots_cellTypes = " ".join(["%d:%s" % (config['ndots'][cellType], cellType) for cellType in config['ndots']]),
        iLabel = config['dot_value_column_label']
    threads: 100
    shell: """
        ../scripts/dotSelect.R {input.dotsTable}  -l {params.iLabel} \
            -N {params.nDots_cellTypes} -t {threads} &> {log}
    """

rule Check_nuclei_by_probe:
    version: PROBE_STATS_VERSION
    input:
        dotsTable = lambda wildcards: expand("%s/fromfish_merged/dots.%s.tsv" % (ORF, wildcards.suffix))
    output:
        "%s/fromfish_merged/stats/nuclei_by_probe.{suffix}.pdf" % ORF,
        "%s/fromfish_merged/stats/nuclei_by_probe.{suffix}.tsv" % ORF
    log:
        "%s/fromfish_merged/log/dots_probe_stats.{suffix}.log" % ORF
    params:
        indir = "%s/fromfish_merged" % ORF,
        suffix = "{suffix}"
    shell: """
        ../scripts/nucleiProbeStats.R {input.dotsTable} \
            {params.indir}/stats -s {params.suffix} &> {log}
    """

rule Plot_ideograms:
    version: IDEOGRAM_PLOT_VERSION
    input:
        giemsa_path = config['giemsa_path'],
        probe_path = config['probe_path'],
        requirement = "%s/fromfish_merged/dots.merged.noDiscardedChannels.G1selected.tsv" % ORF
    output:
        "%s/ideograms/probes.merged.noDiscardedChannels.G1selected.png" % ORF
    log:
        "%s/ideograms/log" % ORF
    params:
        outdir = "%s/ideograms" % ORF
    shell: """
        mkdir -p '{params.outdir}'
        ../scripts/plotIdeograms.R '{input.requirement}'  '{input.probe_path}' \
            '{input.giemsa_path}' '{params.outdir}' &> {log}
    """

rule Rank:
    version: RANK_PROBES_VERSION
    input:
        probe_path = lambda wildcards: config['probe_bed'][wildcards.flag],
        requirements = lambda wildcards: expand([
            "%s/fromfish_merged/dots.%s.tsv" % (ORF, wildcards.suffix),
            "%s/fromfish_merged/stats/nuclei_by_probe.%s.pdf" % (ORF, wildcards.suffix) # sanity-check
        ])
    output:
        ("%s/rankings/ranks.{flag}.%sprobe.{suffix}.tsv" % (ORF, bin_size)
            for bin_size in config['rank_bin_sizes']),
        "%s/rankings/ranks.{flag}.probe.{suffix}.tsv" % ORF,
        "%s/rankings/ranks.{flag}.chrom.{suffix}.tsv" % ORF
    log:
        "%s/rankings/{flag}.{suffix}.log" % ORF
    params:
        indir = "%s/fromfish_merged" % ORF,
        outdir = "%s/rankings" % ORF,
        prefix = "{flag}",
        suffix = "{suffix}",
        sizes = " ".join([str(x) for x in config['rank_bin_sizes']])
    shell: """
        mkdir -p {params.outdir}
        ../scripts/rankProbes.R \
            {params.indir}/dots.{params.suffix}.tsv \
            {input.probe_path} {params.outdir} \
            -p {params.prefix} -s {params.suffix} -b {params.sizes} \
            &> {log}
    """
